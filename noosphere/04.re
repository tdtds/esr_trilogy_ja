= 所有権とオープンソース

　ある物件が無限に複製可能で、いくらでも変えられて、そしてそれをとりまく文化が脅せるような権力関係や財の希少性に基づく経済に基づいていないとき、なにかの「所有権」を持つっていうのはどういうことだろうか。


　実はオープンソース文化に関するかぎり、この質問には簡単に答えられる。ソフトウェア・プロジェクトの所有者というのは、@<strong>{変更したバージョンを公式に再配布する}独占的な権利をコミュニティ全般から認められている人物である。


　（この章で「所有権」を論じるときには、その所有者については単数形を使う。これだとまるですべてのプロジェクトは一人の人物が所有しているかのようだけれど、プロジェクトをグループで所有している場合もあるということは承知してほしい。こういうグループ内の力学についても、この論文で見ていくことにする。）


　標準的なオープンソースのライセンスのもとなら、ソフト進化のゲームではみんなが平等なはずだ。でも現実には、公認の管理者が承認して進化するソフトに統合した「公式」パッチと、第三者による「非公式」パッチとははっきり区別して認識されている。非公式パッチはあまりないし、一般には信用のおけないものとされる@<fn>{RP}。


　@<strong>{公式な}再配布こそが根本的な問題なんだというのは、簡単に示せる。ハッカー文化の慣習は、みんなが自分だけのためにソフトをパッチするのは推奨している。この習慣は、閉じたユーザグループや開発グループ内で変更バージョンを再配布する人々も問題にはしない。そういう変更がオープンソース・コミュニティ一般に対してポストされ、オリジナル版と競合するようになったときにだけ、所有権が問題になってくる。

　一般的にいって、オープンソース・プロジェクトの所有権を獲得するには3つの方法がある。第一の方法はいちばん自明だろうけれど、プロジェクトを創始することだ。プロジェクトの開始以来、管理者が一人しかいなくて、その管理者が活動を続けているなら、ハッカー慣習はそのプロジェクトをだれが所有しているのかについて@<strong>{疑問視することすら}許さない。


　プロジェクトの所有権を獲得する第二の方法は、前の所有者からそれを引き継ぐことだ（いわゆる「バトンタッチ」）。プロジェクトの所有者は開発や保守作業に必要な時間を割けなかったり割く気がなかったりするときには、有能な後継者にプロジェクトを引き継ぐ義務がある。これはこのコミュニティではよく理解されている。


　大きなプロジェクトの場合、こういうコントロールの引き継ぎは一般に派手なファンファーレつきでアナウンスされていることはだいじだ。オープンソースコミュニティ全体として、所有者の後継者選びに実際に文句がついた例はまったくないけれど、慣習的な行為は明らかに、世間的に見た正当性がだいじなんだという認識を含んでいる。


　小規模なプロジェクトでは、プロジェクトの配布パッケージの中に変更履歴を含めておいて、そこで所有者の変化を明記しておけばふつうは十分だ。ここでの明らかな過程は、もし前の所有者が自発的にコントロールをゆずったのでなければ、その人はそれなりの期間内に公開の場で抗議することで、コミュニティの支援のもとでコントロールを奪回できる、というものだ。


　所有権を獲得する第三の方法は、そのソフトに作業が必要だとみてとって、しかももとの所有者が消えたか興味を失ったかしたときだ。もしこれをやるなら、所有者を見つけようとするのがきみの責任だ。それがうまくいかなければ、しかるべき関係した場所（たとえばそのアプリケーション分野専門の Usenet ニュースグループなんか）でそのプロジェクトがどうも放棄されたらしくて、だから引き継ごうと思うんだけど、と宣言することになる。



　慣習は、自分が新しい所有者だと宣言するまえに、しばらく様子を見ろと要求している。このあいだに、だれかが実は自分はそのプロジェクトで作業を続けるんだけど、と申し出れば、その人たちの申し立てが優先されることになる。プロジェクトを引き継ぎたいという意志発表は、何回かやるのがいいとされる。それも、複数の場でやったほうがポイントは高い（関連ニュースグループ、メーリングリストなど）。そして返事を待つのに辛抱強ければもっといい。一般に、前の所有者やほかの権利保持者が反応できるようになるべく努力をしたほうが、反応がないときの自分の権利主張が通りやすい。


　このプロセスを、プロジェクトのユーザコミュニティにも見えるところでやって、反対がなければ、その捨て子プロジェクトの所有権を主張して、その旨を履歴ファイルに記入できる。でもこの方法は、バトンタッチされるよりも危ういもので、ユーザコミュニティから見て相当な改良を加えない限り、正式に認められたと思っちゃいけない。


　ぼくはこういう慣習が実際に働くのを、FSF 以前のオープンソースの古代にさかのぼる 20 年前から見てきている。これにはいくつかとてもおもしろい性質がある。なによりもおもしろいことの一つは、ほとんどのハッカーたちは、実際に自分がそうしていると完全に意識していないのに、これにしたがってきたということだ。この文章は、実際に文になった意識的でそれなりに網羅的なまとめとしては、史上初のものかもしれない。


　もう一つ挙げられるのは、無意識の慣習だというのに、それはきわめて（それどころか驚異的なほど）一貫して守られてきている、ということだ。ぼくは文字通り何百ものオープンソースプロジェクトの進化を見てきた。それなのに、見聞きした大きな逸脱行為はまだ両手の指で数えられるほどしかない。


　でも、第三のおもしろい性質というのは、こういう慣習が時を追って発展してくるとき、それは一貫した方向性を持っていたということだ。この方向性というのは、もっと公共的なアカウンタビリティや通達を奨励し、プロジェクトのクレジットや変更履歴の保存についてもっと配慮を増やして（なににもまして）いまの所有者の正当性を確立しようというものだった。


　こういう性質が示唆しているのは、こうした慣習が偶然の産物ではなくて、オープンソース文化でのなにか暗黙の目的や生成パターンの産物で、その機能方法にとってきわめて根本的なものなんだということだ。


　この論文に早い時期にコメントをよせたある人は、インターネット・ハッカー文化とクラッカー・海賊文化（ゲームのクラッキングと海賊ソフト BBS を中心に活動する、「Warez D00dz@<fn>{d00dz}」）を対比させると双方の生成パターンがなかなかはっきりすることを指摘してくれた。d00dz との対比は後出。

//footnote[d00dz][　「ウェアズ・デューズ」と読む。Warezはwaresであり、海賊コピーされたソフト群など、この種の BBS 上でやりとりされるソフト一般をさす。D00dz は doodz であり、これは dude の複数形を発音に忠実に表記したもの。敢えて訳すと「（ソフト）ウェア野郎ども」かな。濁音になる S をすべて Z で置き換え、さらにo（オー）の字を数字のゼロで置き換える独特の表記に注目。かれらの BBS では多くの人がこのようなハンドルを使用する。A と似ているので 4 を使ったり、 for のかわりに 4 を使ったり、大文字小文字を逆転させることも多い。ありとあらゆるソフトが海賊版で流通しているが、d00dz の多くは別にそれを使うわけではなく、単に保持タイトルを自慢しあっているケースが多い。]

//footnote[RP][　非公式パッチについてはいくつか細かい点がある。まずこれは、「友好的なもの」と「敵対するもの」に分類できる。「友好的」なパッチは管理者のコントロール下で、プロジェクトのソースコードの主流に織り込まれるように設計されている（それが実際に織り込まれるかはまた別の話）。「敵対」パッチは、管理者の認めない方向にプロジェクトをねじまげようとするものだ。一部のプロジェクト（とくに Linux カーネルそのもの）は友好パッチにはすごく甘くて、むしろベータテストの段階では、独自のパッケージを推奨したりさえする。一方の敵対パッチはオリジナルと張り合おうという決断を示すもので、深刻な事態となる。敵対パッチを大量に管理するようになると、プロジェクトはやがて分裂に向かうことが多い。]



