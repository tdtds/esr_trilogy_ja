= どれほどすばらしい贈り物？


　ハッカー文化が貢献を評価して、それに対する仲間内の評判を戻すやり方には、一貫したパターンがある。以下のような規則はすぐに見分けられる：

 1. 期待させられたほどきちんと機能しないなら、それはダメ――どんなに巧妙でオリジナリティ豊かなものであっても。

　「期待させられたほど」という部分に注意。このルールは、完全無欠を求めるものではない。ベータ版や実験ソフトには、もちろんバグがあってもいい。これは、プロジェクトの段階や開発者の主張をもとに、リスクを正確に評価できるようにしろ、と求めているわけだ。

　このルールのおかげで、オープンソースソフトはずいぶん長い間ベータ版のままになっていて、とんでもないバグがぼろぼろ出てきたりしない、というのを開発者が革新するまで、バージョン 1.0 を名乗ったりしない、という現象が見られる。クローズドソースの世界では、バージョン 1.0 というのは、「慎重な人は手を出しちゃダメよ」という意味だ。オープンソースの世界では、むしろ「開発者たちはこいつに自分の評判を賭けてもいいと思っています」というのに近い。

 2. 既存の機能する領域を複製する作業よりは、ノウアスフィアを拡張する仕事のほうがいい。

　こいつをもっと素朴に表現するなら、「独創的な作業は、既存ソフトの機能を複製するよりもいい」ということになるだろう。でも、実はこんなに単純ではない。既存の@<strong>{クローズドな}ソフトの機能を複製するのは、オリジナルなソフトの開発作業と同じくらい高い評価が得られる――それによって、クローズドなプロトコルやフォーマットをこじあけたりして、その領土を新たに提供できるのであれば。

　だからたとえば、いまのオープンソース世界でいちばんプレステージの高いプロジェクトは、Samba だ ―― Unix マシンがマイクロソフトの独占ファイル共有プロトコル SMB のクライアントまたはサーバとして使えるようにするコード。創造的な仕事はほとんどない。むしろ細かいリバースエンジニアリングの細部をうまくやるのが一番の問題だ。それでも、Samba グループは英雄視されている。ユーザ集団をまるごと囲い込んで、ノウアスフィアの大きな部分に縄を張ってしまおうというマイクロソフトの努力を無化するものだからだ。

 3. 主要ディストリビューションに含まれるものは、そうでないものよりもいい。主要ディストリビューションすべてに含まれるものがいちばんえらい。

　ここでの主要ディストリビューションというのは、Red Hat、Debian、Caldera、S.u.S.E. など Linux の大手ディストリビューションのみならず、独自の評判を持っていて、したがって品質を裏書きできると思われているその他のコレクションすべてを含んでいる――たとえば BSD ディストリビューションや、FSF のソースコレクションなど。

 4. 利用は最大の賛辞――そしてカテゴリーキラーは追随ソフトよりもよい。

　他人の判断を信用するというのは、同業者（ピア）レビューのプロセスの基本だ。これが必要なのは、だれもあらゆる代替ソフトをすべてレビューするだけの暇はないからだ。だから、多くの人が使っているソフトは、少数の人しか使っていないソフトよりもいいとされる。

　あまりにできがよくて、ほかの代替品をだれも使おうとしなくなるような仕事をするというのは、だからすさまじいプレステージを獲得することになる。最大の同業者評価を獲得するには、非常に人気のあるカテゴリーキラーとなった独創的な作業が、すべての主要ディストリビューションに含まれるようになることだ。これを一度ならず行った人間は、半ば冗談まじりで「半神半人」（demigods）と呼ばれる。

 5. むずかしくて退屈な作業（たとえばデバッグやドキュメンテーション書き）に継続的に貢献するのは、おもしろくて簡単なハックをいいとこ取りするよりも賞賛すべきことである。

　この規範によって、ハッカーたちが通常はやりたがらないけれど必要な仕事について、コミュニティは見返りを支払うわけだ。でもこれは、次のルールとはちょっと矛盾している：

 6. 機能の大幅な（non-trivialな）拡張は、低レベルのパッチやデバッグよりもいい。

　これがどう機能するかというと、こういうことらしい：一発だけで見た場合、機能を追加するほうがバグ取りよりも見返りが大きい――ただしバグが極端にてごわかったり見つけにくかったりして、それを仕留めること自体が非凡なスキルや賢さを示すのでない限り。でも、こうした行動が長い期間にまたがると、長いこと注意を払って、ごくつまらないバグでもつぶしていく人は、同じ努力をかけて簡単な機能の追加をしてきた人よりも高い地位につけるわけだ。

　ある評者が指摘したことだけれど、こうしたルールはおもしろい形で相互作用して、いつの時点でも最大の効用が報われるようには必ずしもなっていない。ハッカーに、独自の新しいツールを開発するのと、だれか別の人のツールの拡張と、どっちで有名になる見込みが高いかときいたら、答えはまちがいなく「新しいツール」になるだろう。でも、次の二つならどうだろう。

 1. 一日ほんの数回、だれにもわからない形で OS から呼び出されるだけの真新しいツールだけれど、急速にカテゴリーキラーになるもの
 2. ことさら新しくもないしカテゴリーキラーでもない既存ツールに対する拡張をいくつか。ただしそのツールは、毎日使われて、毎日多くの人の目に直接触れる

　この場合、ハッカーは最終的に前者に落ち着くにしても、かなりためらうはずだ。この両者は、だいたい同じくらいの地位を持っている。
　
　これを指摘した評者は、以下のような一言を付け加えて、ぼくに対して論点を強調した。「前者の例は、fetchmail で、後者の例はあなたの場合、vc.el や gud.el など各種のEmacs拡張です」　たしかにかれの言うとおり。ぼくは「各種のEmacsモードの著者」と言われるよりは、「fetchmail 作者」と言われるほうが多い。長期的に見れば、Emacs モードのほうが効用の合計では大きいにちがいないのだけれど。
　ここで起きているのは、真新しい「ブランドアイデンティティ」を持つ仕事は、既存「ブランド」に集積する仕事よりも認知度が高い、ということにすぎないのかもしれない。こうしたルールのさらなる解明と、それがハッカー文化の得点集計システムについてどんなことを物語るのかは、今後の研究課題として有望だろう。



